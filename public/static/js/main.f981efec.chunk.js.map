{"version":3,"sources":["Banner.js","Instructions.js","AudioVisualiser.js","AudioAnalyser.js","RecordToggle.js","App.js","serviceWorker.js","index.js"],"names":["Banner","Jumbotron","fluid","key","Container","className","style","marginTop","marginBottom","aria-label","role","Instructions","props","Toast","maxWidth","ToastBody","status","href","AudioVisualiser","canvas","React","createRef","this","draw","audioData","current","height","width","context","getContext","x","sliceWidth","length","lineWidth","strokeStyle","clearRect","beginPath","moveTo","y","lineTo","stroke","ref","Component","shortid","require","RecordButton","Button","color","toggled","size","minWidth","onClick","UploadingNotification","purl","resolve","url_id","Alert","target","rel","RecordToggle","recorder","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","onstop","recorderOnStop","onstart","recorderOnStart","ondataavailable","recorderOnDataAvailable","console","log","state","isToggleOn","chunks","blob","sendStatus","handleRecordButton","bind","handleSend","handleDelete","event","Blob","type","setState","push","data","m","stop","info","start","uid","generate","process","reader","window","FileReader","readAsDataURL","_this","onloadend","base64","result","split","requestOptions","method","headers","body","JSON","stringify","fetch","response","a","ok","Promise","reject","catch","error","record_element","send_element","marginRight","upload_element","controls","src","URL","createObjectURL","App2","mic","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"8RAyBeA,MAtBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,IAAI,KACnB,kBAACC,EAAA,EAAD,CACEF,OAAK,EACLG,UAAU,cACVC,MAAO,CAAEC,WAAY,GAAIC,cAAe,KAExC,4BACE,0BAAMC,aAAW,KAAKC,KAAK,OAA3B,gBAGC,KAJH,sBAOA,6BACA,uE,gDC6CR,IA6BeC,EAhFf,SAAsBC,GACpB,OACE,kBAACR,EAAA,EAAD,CACED,IAAI,IACJD,OAAK,EACLG,UAAU,oDAEV,kBAACQ,EAAA,EAAD,CAAOP,MAAO,CAAEQ,SAAU,UACxB,kBAACC,EAAA,EAAD,CAAWT,MAAO,CAAEQ,SAAU,UAG5B,iDACqB,2BAAIF,EAAMI,QAC7B,6BACA,4BACE,0KAGgB,IACd,uBAAGC,KAAK,oDAAR,WAJF,IAOI,IACF,uBAAGA,KAAK,kGAAR,UARF,IAWI,IACF,uBAAGA,KAAK,0FAAR,WAZF,IAeI,IACF,uBAAGA,KAAK,6FAAR,8BAhBF,KAqBA,8DACiC,0CADjC,uBAIA,sCACS,oCADT,6B,gECZCC,E,kDAtCb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,OAASC,IAAMC,YAFH,E,iEAMjBC,KAAKC,S,6BAGC,IACEC,EAAcF,KAAKV,MAAnBY,UACFL,EAASG,KAAKH,OAAOM,QACrBC,EAASP,EAAOO,OAChBC,EAAQR,EAAOQ,MACfC,EAAUT,EAAOU,WAAW,MAC9BC,EAAI,EACFC,EAAsB,EAARJ,EAAeH,EAAUQ,OAE7CJ,EAAQK,UAAY,EACpBL,EAAQM,YAAc,UACtBN,EAAQO,UAAU,EAAG,EAAGR,EAAOD,GAE/BE,EAAQQ,YACRR,EAAQS,OAAO,EAAGX,EAAS,GAdtB,oBAecF,GAfd,IAeL,2BAA8B,CAAC,IACvBc,EADsB,QACV,IAASZ,EAC3BE,EAAQW,OAAOT,EAAGQ,GAClBR,GAAKC,GAlBF,8BAoBLH,EAAQW,OAAOT,EAAGJ,EAAS,GAC3BE,EAAQY,W,+BAIR,OAAO,4BAAQb,MAAM,OAAOD,OAAO,MAAMe,IAAKnB,KAAKH,a,GAnCzBuB,a,GCCFA,Y,OCEtBC,EAAUC,EAAQ,IAYxB,SAASC,EAAajC,GACpB,OACE,kBAACkC,EAAA,EAAD,CACEC,MAAOnC,EAAMoC,QAAU,SAAW,UAClCC,KAAK,KACL3C,MAAO,CAAE4C,SAAU,KACnBC,QAASvC,EAAMuC,SAEdvC,EAAMoC,QAAU,iBAAmB,UAK1C,SAASI,EAAsBxC,GAC7B,IAAIyC,EAAOC,kBAxBI,0CAwBc1C,EAAM2C,QACnC,MAAqB,YAAjB3C,EAAMI,OAEN,kBAACwC,EAAA,EAAD,CAAOrD,IAAI,eAAe4C,MAAM,WAAhC,yBAEE,6BACA,uBAAG9B,KAAMoC,EAAMI,OAAO,SAASC,IAAI,uBAChCL,IAImB,cAAjBzC,EAAMI,OAEb,kBAACwC,EAAA,EAAD,CAAOrD,IAAI,iBAAiB4C,MAAM,WAAlC,8CAEE,6BACA,uBAAG9B,KAAMoC,EAAMI,OAAO,SAASC,IAAI,uBAChCL,IAImB,WAAjBzC,EAAMI,OAEb,kBAACwC,EAAA,EAAD,CAAOrD,IAAI,YAAY4C,MAAM,UAA7B,yBACyB,IACvB,0BAAMrC,KAAK,MAAMD,aAAW,OAA5B,sBAJC,E,IAkMMkD,E,kDArLb,WAAY/C,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAIgD,EAAWC,UAAUC,aACtBC,aAAa,CAAEC,OAAO,IACtBC,MAAK,SAACC,GACL,IAAIC,EAAgB,IAAIC,cAAcF,GAKtC,OAJAC,EAAcE,OAAS,EAAKC,eAC5BH,EAAcI,QAAU,EAAKC,gBAC7BL,EAAcM,gBAAkB,EAAKC,wBACrCC,QAAQC,IAAIT,GACLA,KAXM,OAcjB,EAAKU,MAAQ,CACXC,YAAY,EACZvB,OAAQ,GACRwB,OAAQ,GACRC,KAAM,KACNC,WAAY,GACZd,cAAeP,GAGjB,EAAKsB,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKb,eAAiB,EAAKA,eAAea,KAApB,gBACtB,EAAKX,gBAAkB,EAAKA,gBAAgBW,KAArB,gBACvB,EAAKT,wBAA0B,EAAKA,wBAAwBS,KAA7B,gBA5Bd,E,2DA+BJG,GACb,IAAIN,EAAO,IAAIO,KAAKjE,KAAKuD,MAAME,OAAQ,CACrCS,KAAM,2BAERlE,KAAKmE,SAAS,CAAET,W,8CAEMM,GACtB,IAAIP,EAAS,GACbA,EAAOW,KAAP,MAAAX,EAAM,YAASzD,KAAKuD,MAAME,SAC1BA,EAAOW,KAAKJ,EAAMK,MAClBrE,KAAKmE,SAAS,CAAEV,a,sCAEFO,GACdhE,KAAKmE,UAAS,SAAUZ,GACtB,MAAO,CAAEE,OAAQ,GAAIC,KAAM,W,2CAK7BL,QAAQC,IAAItD,KAAKuD,MAAMV,eAClB7C,KAAKuD,MAAMC,WAUdxD,KAAKuD,MAAMV,cAAcF,MAAK,SAAC2B,GACb,aAAZA,EAAEf,OACJe,EAAEC,OACFlB,QAAQC,IAAI,yBAA2BgB,EAAEf,QAEzCF,QAAQmB,KAAK,wCAdjBxE,KAAKuD,MAAMV,cAAcF,MAAK,SAAC2B,GACb,cAAZA,EAAEf,OACJe,EAAEG,QACFpB,QAAQC,IAAI,yBAA2BgB,EAAEf,QAEzCF,QAAQmB,KAAK,yCAcnBxE,KAAKmE,SAAS,CACZX,YAAaxD,KAAKuD,MAAMC,WACxBX,cAAe7C,KAAKuD,MAAMV,cAC1BZ,OAAQ,GACRwB,OAAQ,GACRC,KAAM,KACNC,WAAY,O,mCAKd,IAAMe,EAAMrD,EAAQsD,WACd5C,EAAO6C,eAAyCF,EACtDrB,QAAQC,IAAI,gBAAkBvB,GAE9B,IAAI2B,EAAO,IAAIO,KAAKjE,KAAKuD,MAAME,OAAQ,CACrCS,KAAM,2BAERb,QAAQC,IAAI,cAAeI,EAAK/B,MAChC3B,KAAKmE,SAAS,CAAElC,OAAQF,EAAM4B,WAAY,cAE1C,IAAIkB,EAAS,IAAIC,OAAOC,WACxBF,EAAOG,cAActB,GACrB,IAAIuB,EAAQjF,KACZ6E,EAAOK,UAAY,WACjB,IAAIC,EAASN,EAAOO,OACpBD,EAASA,EAAOE,MAAM,KAAK,GAG3B,IAAMC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEjB,IAAKA,EAAKhC,MAAOyC,KAE1CS,MAAM7D,EAAMuD,GACT3C,KADH,uCACQ,WAAOkD,GAAP,SAAAC,EAAA,yDACJb,EAAMd,SAAS,CAAER,WAAY,cACxBkC,EAASE,GAFV,uBAGFd,EAAMd,SAAS,CAAER,WAAY,WAH3B,kBAIKqC,QAAQC,OAAOJ,EAASnG,SAJ7B,OAOJuF,EAAMd,SAAS,CAAER,WAAY,YAPzB,2CADR,uDAcGuC,OAAM,SAACC,GACNlB,EAAMd,SAAS,CAAER,WAAY,WAC7BN,QAAQ8C,MAAM,2CAA4CA,OAGhE9C,QAAQC,IAAItD,KAAKuD,MAAMI,c,qCAGvB3D,KAAKmE,SAAS,CAAEX,YAAY,EAAOE,KAAM,KAAMzB,OAAQ,O,+BAIvD,IAAImE,EACF,yBAAKrH,UAAU,eACb,kBAACwC,EAAD,CACEG,QAAS1B,KAAKuD,MAAMC,WACpB3B,QAAS7B,KAAK4D,sBAIpB,IAAK5D,KAAKuD,MAAMG,KAAM,OAAO0C,EAE7B,IAAIC,EACF,yBAAKtH,UAAU,eACb,kBAACyC,EAAA,EAAD,CACE3C,IAAI,cACJ4C,MAAM,UACNE,KAAK,KACL3C,MAAO,CAAE4C,SAAU,GAAI0E,YAAa,IACpCzE,QAAS7B,KAAK8D,YALhB,SAYAyC,EACF,yBAAKxH,UAAU,eACb,kBAAC+C,EAAD,CACEpC,OAAQM,KAAKuD,MAAMI,WACnB1B,OAAQjC,KAAKuD,MAAMtB,UAKzB,OACE,yBAAKlD,UAAU,eACZqH,EACD,6BACA,yBAAKrH,UAAU,eACb,2BACEC,MAAO,CAAE4C,SAAU,KACnB4E,UAAU,EACVC,IAAKC,IAAIC,gBAAgB3G,KAAKuD,MAAMG,SAGvC1D,KAAKuD,MAAMI,WAAa4C,EAAiBF,O,GAhLvBvG,IAAMsB,W,ICGlBwF,E,kDAhDb,WAAYtH,GAAQ,IAAD,8BACjB,cAAMA,IAEDiE,MAAQ,CACXsD,IAAK,WAGPtE,UAAUC,aACPC,aAAa,CAAEC,OAAO,IACtBC,MAAK,SAACC,GAEL,OADA,EAAKuB,SAAS,CAAE0C,IAAK,OACdjE,KAERsD,OAAM,kBAAM,EAAK/B,SAAS,CAAE0C,IAAK,WAbnB,E,qDAiBjB,MAAuB,OAAnB7G,KAAKuD,MAAMsD,IAEX,6BACE,kBAAC,EAAD,CAAQhI,IAAI,MACZ,kBAAC,EAAD,CAAcA,IAAI,IAAIa,OAAQM,KAAKuD,MAAMsD,MACzC,wBAAIhI,IAAI,MACR,kBAAC,EAAD,CAAcA,IAAI,OAKpB,6BACE,kBAAC,EAAD,CAAQA,IAAI,MACZ,kBAAC,EAAD,CAAcA,IAAI,IAAIa,OAAQM,KAAKuD,MAAMsD,MACzC,wBAAIhI,IAAI,MACR,yBAAKE,UAAU,eACb,kBAACyC,EAAA,EAAD,CACE3C,IAAI,IACJ4C,MAAM,UACNE,KAAK,KACL3C,MAAO,CAAE4C,SAAU,KACnBkF,UAAQ,GALV,gB,GAlCOhH,IAAMsB,WCNL2F,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBhF,WACrBA,UAAUiF,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMyB,c","file":"static/js/main.f981efec.chunk.js","sourcesContent":["import React from \"react\";\nimport { Jumbotron, Container } from \"reactstrap\";\n\nfunction Banner() {\n  return (\n    <Jumbotron fluid key=\"1\">\n      <Container\n        fluid\n        className=\"text-center\"\n        style={{ marginTop: -20, marginBottom: -20 }}\n      >\n        <h1>\n          <span aria-label=\"hi\" role=\"img\">\n            ðŸ‘‹\n          </span>\n          {\"  \"}\n          Hello, Participant\n        </h1>\n        <br></br>\n        <h4>and thank you for doing this survey!</h4>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport default Banner;\n","import React, { useState } from \"react\";\nimport {\n  Accordion,\n  Card,\n  CardHeader,\n  CardBody,\n  Toast,\n  ToastBody,\n  Container,\n  Button,\n  Collapse,\n} from \"reactstrap\";\n\nfunction Instructions(props) {\n  return (\n    <Container\n      key=\"2\"\n      fluid\n      className=\"d-flex justify-content-center align-items-center\"\n    >\n      <Toast style={{ maxWidth: \"600px\" }}>\n        <ToastBody style={{ maxWidth: \"600px\" }}>\n          {/* <h5>Record your experiment!</h5>\n          <br></br> */}\n          <p>\n            Microphone status: <b>{props.status}</b>\n            <br></br>\n            <ol>\n              <li>\n                Ensure sure the mic on! If you have issues, try reloading the\n                page, restaring your browser, using another browser or changing\n                you settings:{\" \"}\n                <a href=\"https://support.google.com/chrome/answer/2693767\">\n                  Android\n                </a>\n                ,{\" \"}\n                <a href=\"https://support.apple.com/guide/mac-help/control-access-to-your-microphone-on-mac-mchla1b1e1fe\">\n                  Safari\n                </a>\n                ,{\" \"}\n                <a href=\"https://support.mozilla.org/en-US/kb/how-manage-your-camera-and-microphone-permissions\">\n                  Firefox\n                </a>\n                ,{\" \"}\n                <a href=\"https://support.microsoft.com/en-us/help/4468232/windows-10-camera-microphone-and-privacy\">\n                  Internet Explorer and Edge\n                </a>\n                .\n              </li>\n              <li>\n                After the audio is recorded, a <b>unique link</b> will be\n                generated.\n              </li>\n              <li>\n                Please <b>share</b> this link with me!\n              </li>\n            </ol>\n          </p>\n        </ToastBody>\n      </Toast>\n    </Container>\n  );\n}\n\nconst Instructions2 = (props) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <div>\n      <div id=\"accordion\">\n        <Card>\n          <CardHeader\n            color=\"primary\"\n            onClick={toggle}\n            style={{ marginBottom: \"1rem\" }}\n          >\n            Here, you can record your audio.\n          </CardHeader>\n          <Collapse isOpen={isOpen}>\n            <CardBody>\n              After the audio is recorded, a <b>unique link</b> will be\n              generated.\n              <br></br>\n              Please send me this link!\n            </CardBody>\n          </Collapse>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React, { Component } from \"react\";\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { audioData } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext(\"2d\");\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeStyle = \"#000000\";\n    context.clearRect(0, 0, width, height);\n\n    context.beginPath();\n    context.moveTo(0, height / 2);\n    for (const item of audioData) {\n      const y = (item / 255.0) * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  render() {\n    return <canvas width=\"1000\" height=\"100\" ref={this.canvas} />;\n  }\n}\n\nexport default AudioVisualiser;\n","import React, { Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\n\nclass AudioAnalyser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { audioData: new Uint8Array(0) };\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  tick() {\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.setState({ audioData: this.dataArray });\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n    return <AudioVisualiser audioData={this.state.audioData} />;\n  }\n}\n\nexport default AudioAnalyser;\n","import React from \"react\";\nimport { Alert, Button } from \"reactstrap\";\nimport AudioAnalyser from \"./AudioAnalyser\";\nimport { resolve } from \"url\";\n\nconst shortid = require(\"shortid\");\n\nconst BASE_URL = \"https://candicesurvey2020.herokuapp.com\";\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction RecordButton(props) {\n  return (\n    <Button\n      color={props.toggled ? \"danger\" : \"primary\"}\n      size=\"lg\"\n      style={{ minWidth: 200 }}\n      onClick={props.onClick}\n    >\n      {props.toggled ? \"Stop recording\" : \"Record\"}\n    </Button>\n  );\n}\n\nfunction UploadingNotification(props) {\n  let purl = resolve(BASE_URL, props.url_id);\n  if (props.status === \"success\") {\n    return (\n      <Alert key=\"send-success\" color=\"success\">\n        Find your recording at\n        <br></br>\n        <a href={purl} target=\"_blank\" rel=\"noopener noreferrer\">\n          {purl}\n        </a>\n      </Alert>\n    );\n  } else if (props.status === \"uploading\") {\n    return (\n      <Alert key=\"send-uploading\" color=\"warning\">\n        Your recording at will soon be available at\n        <br></br>\n        <a href={purl} target=\"_blank\" rel=\"noopener noreferrer\">\n          {purl}\n        </a>\n      </Alert>\n    );\n  } else if (props.status === \"failed\") {\n    return (\n      <Alert key=\"send-fail\" color=\"danger\">\n        The upload has failed!{\" \"}\n        <span role=\"img\" aria-label=\"sad\">\n          ðŸ˜¢\n        </span>\n      </Alert>\n    );\n  }\n}\n\nclass RecordToggle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let recorder = navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        let mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.onstop = this.recorderOnStop;\n        mediaRecorder.onstart = this.recorderOnStart;\n        mediaRecorder.ondataavailable = this.recorderOnDataAvailable;\n        console.log(mediaRecorder);\n        return mediaRecorder;\n      });\n\n    this.state = {\n      isToggleOn: false,\n      url_id: \"\",\n      chunks: [],\n      blob: null,\n      sendStatus: \"\",\n      mediaRecorder: recorder,\n    };\n    // This binding is necessary to make `this` work in the callback\n    this.handleRecordButton = this.handleRecordButton.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.recorderOnStop = this.recorderOnStop.bind(this);\n    this.recorderOnStart = this.recorderOnStart.bind(this);\n    this.recorderOnDataAvailable = this.recorderOnDataAvailable.bind(this);\n  }\n\n  recorderOnStop(event) {\n    let blob = new Blob(this.state.chunks, {\n      type: \"audio/ogg; codecs=opus\",\n    });\n    this.setState({ blob });\n  }\n  recorderOnDataAvailable(event) {\n    let chunks = [];\n    chunks.push(...this.state.chunks);\n    chunks.push(event.data);\n    this.setState({ chunks });\n  }\n  recorderOnStart(event) {\n    this.setState(function (state) {\n      return { chunks: [], blob: null };\n    });\n  }\n\n  handleRecordButton() {\n    console.log(this.state.mediaRecorder);\n    if (!this.state.isToggleOn) {\n      this.state.mediaRecorder.then((m) => {\n        if (m.state !== \"recording\") {\n          m.start();\n          console.log(\"mediaRecorder status: \" + m.state);\n        } else {\n          console.info(\"mediaRecorder is already recording\");\n        }\n      });\n    } else {\n      this.state.mediaRecorder.then((m) => {\n        if (m.state !== \"inactive\") {\n          m.stop();\n          console.log(\"mediaRecorder status: \" + m.state);\n        } else {\n          console.info(\"mediaRecorder is already inactive\");\n        }\n      });\n    }\n\n    this.setState({\n      isToggleOn: !this.state.isToggleOn,\n      mediaRecorder: this.state.mediaRecorder,\n      url_id: \"\",\n      chunks: [],\n      blob: null,\n      sendStatus: \"\",\n    });\n  }\n\n  handleSend() {\n    const uid = shortid.generate();\n    const purl = process.env.PUBLIC_URL + \"/recording/\" + uid;\n    console.log(\"Uploading to \" + purl);\n\n    let blob = new Blob(this.state.chunks, {\n      type: \"audio/ogg; codecs=opus\",\n    });\n    console.log(\"Data size: \", blob.size);\n    this.setState({ url_id: purl, sendStatus: \"uploading\" });\n\n    let reader = new window.FileReader();\n    reader.readAsDataURL(blob);\n    let _this = this;\n    reader.onloadend = function () {\n      let base64 = reader.result;\n      base64 = base64.split(\",\")[1];\n      // console.log(base64);\n\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ uid: uid, audio: base64 }),\n      };\n      fetch(purl, requestOptions)\n        .then(async (response) => {\n          _this.setState({ sendStatus: \"uploading\" });\n          if (!response.ok) {\n            _this.setState({ sendStatus: \"failed\" });\n            return Promise.reject(response.status);\n          }\n          // sleep(3000);\n          _this.setState({ sendStatus: \"success\" });\n          // const data = await response.json();\n          // if (data && data.message) {\n          //   this.setState({ postId: data.id });\n          // }\n        })\n        .catch((error) => {\n          _this.setState({ sendStatus: \"failed\" });\n          console.error(\"There was an error uploading the file!\\n\", error);\n        });\n    };\n    console.log(this.state.sendStatus);\n  }\n  handleDelete() {\n    this.setState({ isToggleOn: false, blob: null, url_id: \"\" });\n  }\n\n  render() {\n    let record_element = (\n      <div className=\"text-center\">\n        <RecordButton\n          toggled={this.state.isToggleOn}\n          onClick={this.handleRecordButton}\n        ></RecordButton>\n      </div>\n    );\n    if (!this.state.blob) return record_element;\n\n    let send_element = (\n      <div className=\"text-center\">\n        <Button\n          key=\"send-button\"\n          color=\"warning\"\n          size=\"lg\"\n          style={{ minWidth: 20, marginRight: 10 }}\n          onClick={this.handleSend}\n        >\n          Send\n        </Button>\n      </div>\n    );\n\n    let upload_element = (\n      <div className=\"text-center\">\n        <UploadingNotification\n          status={this.state.sendStatus}\n          url_id={this.state.url_id}\n        ></UploadingNotification>\n      </div>\n    );\n\n    return (\n      <div className=\"text-center\">\n        {record_element}\n        <br></br>\n        <div className=\"text-center\">\n          <audio\n            style={{ minWidth: 320 }}\n            controls={true}\n            src={URL.createObjectURL(this.state.blob)}\n          ></audio>\n        </div>\n        {this.state.sendStatus ? upload_element : send_element}\n      </div>\n    );\n  }\n}\n\nexport default RecordToggle;\n\n//<Button color=\"danger\" size=\"lg\" style={{ minWidth: 20, marginLeft: 0 }} onClick={this.handleDelete}Delete</Button>\n","import React from \"react\";\nimport \"./App.css\";\nimport Banner from \"./Banner\";\nimport Instructions from \"./Instructions\";\nimport RecordToggle from \"./RecordToggle\";\nimport { Button } from \"reactstrap\";\n\nfunction App() {\n  return (\n    <div>\n      <Banner key=\"1\"></Banner>\n      <Instructions key=\"2\"></Instructions>\n      <br key=\"3\"></br>\n      <RecordToggle key=\"4\"></RecordToggle>\n    </div>\n  );\n}\n\nclass App2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mic: \"Pending\",\n    };\n\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        this.setState({ mic: \"On\" });\n        return stream;\n      })\n      .catch(() => this.setState({ mic: \"Off\" }));\n  }\n\n  render() {\n    if (this.state.mic === \"On\")\n      return (\n        <div>\n          <Banner key=\"1\"></Banner>\n          <Instructions key=\"2\" status={this.state.mic}></Instructions>\n          <br key=\"3\"></br>\n          <RecordToggle key=\"4\"></RecordToggle>\n        </div>\n      );\n    else\n      return (\n        <div>\n          <Banner key=\"1\"></Banner>\n          <Instructions key=\"2\" status={this.state.mic}></Instructions>\n          <br key=\"3\"></br>\n          <div className=\"text-center\">\n            <Button\n              key=\"4\"\n              color=\"primary\"\n              size=\"lg\"\n              style={{ minWidth: 200 }}\n              disabled\n            >\n              Record\n            </Button>\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default App2;\n\n// //          <div className=\"text-center\">\n// <Button\n// color=\"primary\"\n// size=\"lg\"\n// style={{ minWidth: 200 }}\n// disabled\n// >\n// Record\n// </Button>\n// </div>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}