{"version":3,"sources":["AudioVisualiser.js","App.js","AudioAnalyser.js","serviceWorker.js","index.js"],"names":["AudioVisualiser","props","canvas","React","createRef","this","draw","audioData","current","height","width","context","getContext","x","sliceWidth","length","lineWidth","strokeStyle","clearRect","beginPath","moveTo","y","lineTo","stroke","ref","Component","shortid","require","Banner","Jumbotron","fluid","key","Container","className","style","marginTop","marginBottom","aria-label","role","Instructions","Toast","maxWidth","ToastBody","RecordToggle","recorder","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","onstop","recorderOnStop","onstart","recorderOnStart","ondataavailable","recorderOnDataAvailable","state","isToggleOn","chunks","blob","handleClick","bind","handleSend","handleDelete","event","setState","clipName","prompt","console","log","Blob","type","push","data","m","stop","start","uid","generate","purl","process","reader","window","FileReader","readAsDataURL","onloadend","base64","result","split","requestOptions","method","headers","body","JSON","stringify","fetch","response","a","ok","Promise","reject","status","json","message","postId","id","catch","error","btn_text","btn_color","Button","color","size","minWidth","onClick","controls","src","URL","createObjectURL","marginRight","marginLeft","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oWAyCeA,E,kDAtCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,OAASC,IAAMC,YAFH,E,iEAMjBC,KAAKC,S,6BAGC,IACEC,EAAcF,KAAKJ,MAAnBM,UACFL,EAASG,KAAKH,OAAOM,QACrBC,EAASP,EAAOO,OAChBC,EAAQR,EAAOQ,MACfC,EAAUT,EAAOU,WAAW,MAC9BC,EAAI,EACFC,EAAsB,EAARJ,EAAeH,EAAUQ,OAE7CJ,EAAQK,UAAY,EACpBL,EAAQM,YAAc,UACtBN,EAAQO,UAAU,EAAG,EAAGR,EAAOD,GAE/BE,EAAQQ,YACRR,EAAQS,OAAO,EAAGX,EAAS,GAdtB,oBAecF,GAfd,IAeL,2BAA8B,CAAC,IACvBc,EADsB,QACV,IAASZ,EAC3BE,EAAQW,OAAOT,EAAGQ,GAClBR,GAAKC,GAlBF,8BAoBLH,EAAQW,OAAOT,EAAGJ,EAAS,GAC3BE,EAAQY,W,+BAIR,OAAO,4BAAQb,MAAM,OAAOD,OAAO,MAAMe,IAAKnB,KAAKH,a,GAnCzBuB,aCExBC,GCDsBD,YDCZE,EAAQ,KAExB,SAASC,IACP,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,IAAI,KACnB,kBAACC,EAAA,EAAD,CACEF,OAAK,EACLG,UAAU,cACVC,MAAO,CAAEC,WAAY,GAAIC,cAAe,KAExC,4BACE,0BAAMC,aAAW,KAAKC,KAAK,OAA3B,iBAIF,kDACA,6BACA,sEAMR,SAASC,IACP,OACE,kBAACP,EAAA,EAAD,CACED,IAAI,IACJD,OAAK,EACLG,UAAU,oDAEV,kBAACO,EAAA,EAAD,CAAON,MAAO,CAAEO,SAAU,UACxB,kBAACC,EAAA,EAAD,CAAWR,MAAO,CAAEO,SAAU,UAC5B,gEACA,8EACkD,0CAAmB,IADrE,uBAIA,4D,IAOJE,E,kDACJ,WAAY1C,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAI2C,EAAWC,UAAUC,aACtBC,aAAa,CAAEC,OAAO,IACtBC,MAAK,SAACC,GACL,IAAIC,EAAgB,IAAIC,cAAcF,GAItC,OAHAC,EAAcE,OAAS,EAAKC,eAC5BH,EAAcI,QAAU,EAAKC,gBAC7BL,EAAcM,gBAAkB,EAAKC,wBAC9BP,KAVM,OAajB,EAAKQ,MAAQ,CACXC,YAAY,EACZC,OAAQ,GACRC,KAAM,KACNX,cAAeP,GAGjB,EAAKmB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKV,eAAiB,EAAKA,eAAeU,KAApB,gBACtB,EAAKR,gBAAkB,EAAKA,gBAAgBQ,KAArB,gBACvB,EAAKN,wBAA0B,EAAKA,wBAAwBM,KAA7B,gBAzBd,E,2DA4BJG,GACb9D,KAAK+D,UAAS,SAAUT,GACtB,IAAIU,EAAWC,OACb,2EAEFC,QAAQC,IAAIH,GACZE,QAAQC,IAAIb,EAAME,QAClB,IAAIC,EAAO,IAAIW,KAAKd,EAAME,OAAQ,CAChCa,KAAM,2BAGR,OADAH,QAAQC,IAAIV,GACL,CAAEA,a,8CAGWK,GACtB9D,KAAK+D,UAAS,SAAUT,GACtB,IAAIE,EAAS,GAKb,OAJAU,QAAQC,IAAIX,GACZA,EAAOc,KAAP,MAAAd,EAAM,YAASF,EAAME,SACrBA,EAAOc,KAAKR,EAAMS,MAClBL,QAAQC,IAAIX,GACL,CAAEA,SAAQC,KAAM,W,sCAGXK,GACd9D,KAAK+D,UAAS,SAAUT,GACtB,MAAO,CAAEE,OAAQ,GAAIC,KAAM,W,oCAK7BzD,KAAK+D,UAAS,SAAUT,GAoBtB,OAnBKA,EAAMC,WAUTD,EAAMR,cAAcF,MAAK,SAAC4B,GACR,aAAZA,EAAElB,OACJkB,EAAEC,OACFP,QAAQC,IAAIK,EAAElB,QAEdY,QAAQC,IAAI,wBAdhBb,EAAMR,cAAcF,MAAK,SAAC4B,GACR,cAAZA,EAAElB,OACJkB,EAAEE,QACFR,QAAQC,IAAIK,EAAElB,QAEdY,QAAQC,IAAI,yBAaX,CACLZ,YAAaD,EAAMC,WACnBT,cAAeQ,EAAMR,oB,mCAKzB9C,KAAK+D,UAAS,SAAUT,GACtB,IAAMqB,EAAMtD,EAAQuD,WACdC,EAAOC,eAAyCH,EAElDlB,EAAO,IAAIW,KAAKd,EAAME,OAAQ,CAChCa,KAAM,2BAGJU,EAAS,IAAIC,OAAOC,WACxBF,EAAOG,cAAczB,GACrBsB,EAAOI,UAAY,WAAa,IAAD,OACzBC,EAASL,EAAOM,OACpBD,EAASA,EAAOE,MAAM,KAAK,GAC3BpB,QAAQC,IAAIiB,GAEZ,IAAMG,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEjB,IAAKA,EAAKhC,MAAOyC,KAE1CS,MAAMhB,EAAMU,GACT3C,KADH,uCACQ,WAAOkD,GAAP,eAAAC,EAAA,yDACCD,EAASE,GADV,yCAEKC,QAAQC,OAAOJ,EAASK,SAF7B,uBAIeL,EAASM,OAJxB,QAIE7B,EAJF,SAKQA,EAAK8B,SACf,EAAKtC,SAAS,CAAEuC,OAAQ/B,EAAKgC,KAN3B,2CADR,uDAUGC,OAAM,SAACC,GACNvC,QAAQuC,MAAM,sBAAuBA,OAI3CvC,QAAQC,IAAIU,Q,qCAId7E,KAAK+D,UAAS,SAAUT,GACtB,MAAO,CAAEC,YAAY,EAAOE,KAAM,W,+BAKpC,IAAIiD,EAAW1G,KAAKsD,MAAMC,WAAa,iBAAmB,SACtDoD,EAAY3G,KAAKsD,MAAMC,WAAa,SAAW,UACnD,OAAKvD,KAAKsD,MAAMG,KAeZ,yBAAK7B,UAAU,eACb,kBAACgF,EAAA,EAAD,CACEC,MAAOF,EACPG,KAAK,KACLjF,MAAO,CAAEkF,SAAU,KACnBC,QAAShH,KAAK0D,aAEbgD,GAEH,6BACA,6BACA,yBAAK9E,UAAU,eACb,2BACEC,MAAO,CAAEkF,SAAU,KACnBE,UAAU,EACVC,IAAKC,IAAIC,gBAAgBpH,KAAKsD,MAAMG,SAGxC,kBAACmD,EAAA,EAAD,CACEC,MAAM,UACNC,KAAK,KACLjF,MAAO,CAAEkF,SAAU,GAAIM,YAAa,IACpCL,QAAShH,KAAK4D,YAJhB,QAQA,kBAACgD,EAAA,EAAD,CACEC,MAAM,SACNC,KAAK,KACLjF,MAAO,CAAEkF,SAAU,GAAIO,WAAY,GACnCN,QAAShH,KAAK6D,cAJhB,WAvCF,yBAAKjC,UAAU,eACb,kBAACgF,EAAA,EAAD,CACEC,MAAOF,EACPG,KAAK,KACLjF,MAAO,CAAEkF,SAAU,KACnBC,QAAShH,KAAK0D,aAEbgD,Q,GA/Ic5G,IAAMsB,WAuMlBmG,MAXf,WACE,OACE,6BACE,kBAAChG,EAAD,CAAQG,IAAI,MACZ,kBAACQ,EAAD,CAAcR,IAAI,MAClB,wBAAIA,IAAI,MACR,kBAAC,EAAD,CAAcA,IAAI,QEtOJ8F,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBxF,WACrBA,UAAUyF,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMJ,c","file":"static/js/main.6054818e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { audioData } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext(\"2d\");\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeStyle = \"#000000\";\n    context.clearRect(0, 0, width, height);\n\n    context.beginPath();\n    context.moveTo(0, height / 2);\n    for (const item of audioData) {\n      const y = (item / 255.0) * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  render() {\n    return <canvas width=\"1000\" height=\"100\" ref={this.canvas} />;\n  }\n}\n\nexport default AudioVisualiser;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Jumbotron, Toast, ToastBody, Container, Button } from \"reactstrap\";\nimport AudioAnalyser from \"./AudioAnalyser\";\nconst shortid = require(\"shortid\");\n\nfunction Banner() {\n  return (\n    <Jumbotron fluid key=\"1\">\n      <Container\n        fluid\n        className=\"text-center\"\n        style={{ marginTop: -20, marginBottom: -20 }}\n      >\n        <h1>\n          <span aria-label=\"hi\" role=\"img\">\n            ðŸ‘‹\n          </span>\n        </h1>\n        <h1>Hello, Participant</h1>\n        <br></br>\n        <h4>and thank you for doing this survey!</h4>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nfunction Instructions() {\n  return (\n    <Container\n      key=\"2\"\n      fluid\n      className=\"d-flex justify-content-center align-items-center\"\n    >\n      <Toast style={{ maxWidth: \"600px\" }}>\n        <ToastBody style={{ maxWidth: \"600px\" }}>\n          <h5>Here, you can record your audio.</h5>\n          <p>\n            After the audio is recorded, we will generate a <b>unique link</b>{\" \"}\n            for this recording.\n          </p>\n          <p>Send me this link, please!</p>\n        </ToastBody>\n      </Toast>\n    </Container>\n  );\n}\n\nclass RecordToggle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let recorder = navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        let mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.onstop = this.recorderOnStop;\n        mediaRecorder.onstart = this.recorderOnStart;\n        mediaRecorder.ondataavailable = this.recorderOnDataAvailable;\n        return mediaRecorder;\n      });\n\n    this.state = {\n      isToggleOn: false,\n      chunks: [],\n      blob: null,\n      mediaRecorder: recorder,\n    };\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.recorderOnStop = this.recorderOnStop.bind(this);\n    this.recorderOnStart = this.recorderOnStart.bind(this);\n    this.recorderOnDataAvailable = this.recorderOnDataAvailable.bind(this);\n  }\n\n  recorderOnStop(event) {\n    this.setState(function (state) {\n      let clipName = prompt(\n        \"Please enter your participant ID (or leave blank if you don't remember)\"\n      );\n      console.log(clipName);\n      console.log(state.chunks);\n      let blob = new Blob(state.chunks, {\n        type: \"audio/ogg; codecs=opus\",\n      });\n      console.log(blob);\n      return { blob };\n    });\n  }\n  recorderOnDataAvailable(event) {\n    this.setState(function (state) {\n      let chunks = [];\n      console.log(chunks);\n      chunks.push(...state.chunks);\n      chunks.push(event.data);\n      console.log(chunks);\n      return { chunks, blob: null };\n    });\n  }\n  recorderOnStart(event) {\n    this.setState(function (state) {\n      return { chunks: [], blob: null };\n    });\n  }\n\n  handleClick() {\n    this.setState(function (state) {\n      if (!state.isToggleOn) {\n        state.mediaRecorder.then((m) => {\n          if (m.state !== \"recording\") {\n            m.start();\n            console.log(m.state);\n          } else {\n            console.log(\"Already recording!\");\n          }\n        });\n      } else {\n        state.mediaRecorder.then((m) => {\n          if (m.state !== \"inactive\") {\n            m.stop();\n            console.log(m.state);\n          } else {\n            console.log(\"Already inactive!\");\n          }\n        });\n      }\n      return {\n        isToggleOn: !state.isToggleOn,\n        mediaRecorder: state.mediaRecorder,\n      };\n    });\n  }\n  handleSend() {\n    this.setState(function (state) {\n      const uid = shortid.generate();\n      const purl = process.env.PUBLIC_URL + \"/recording/\" + uid;\n\n      let blob = new Blob(state.chunks, {\n        type: \"audio/ogg; codecs=opus\",\n      });\n\n      let reader = new window.FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = function () {\n        let base64 = reader.result;\n        base64 = base64.split(\",\")[1];\n        console.log(base64);\n\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ uid: uid, audio: base64 }),\n        };\n        fetch(purl, requestOptions)\n          .then(async (response) => {\n            if (!response.ok) {\n              return Promise.reject(response.status);\n            }\n            const data = await response.json();\n            if (data && data.message) {\n              this.setState({ postId: data.id });\n            }\n          })\n          .catch((error) => {\n            console.error(\"There was an error!\", error);\n          });\n      };\n\n      console.log(purl);\n    });\n  }\n  handleDelete() {\n    this.setState(function (state) {\n      return { isToggleOn: false, blob: null };\n    });\n  }\n\n  render() {\n    let btn_text = this.state.isToggleOn ? \"Stop recording\" : \"Record\";\n    let btn_color = this.state.isToggleOn ? \"danger\" : \"primary\";\n    if (!this.state.blob) {\n      return (\n        <div className=\"text-center\">\n          <Button\n            color={btn_color}\n            size=\"lg\"\n            style={{ minWidth: 200 }}\n            onClick={this.handleClick}\n          >\n            {btn_text}\n          </Button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"text-center\">\n          <Button\n            color={btn_color}\n            size=\"lg\"\n            style={{ minWidth: 200 }}\n            onClick={this.handleClick}\n          >\n            {btn_text}\n          </Button>\n          <br></br>\n          <br></br>\n          <div className=\"text-center\">\n            <audio\n              style={{ minWidth: 320 }}\n              controls={true}\n              src={URL.createObjectURL(this.state.blob)}\n            ></audio>\n          </div>\n          <Button\n            color=\"success\"\n            size=\"lg\"\n            style={{ minWidth: 20, marginRight: 10 }}\n            onClick={this.handleSend}\n          >\n            Send\n          </Button>\n          <Button\n            color=\"danger\"\n            size=\"lg\"\n            style={{ minWidth: 20, marginLeft: 0 }}\n            onClick={this.handleDelete}\n          >\n            Delete\n          </Button>\n        </div>\n      );\n    }\n  }\n}\nfunction App() {\n  return (\n    <div>\n      <Banner key=\"1\"></Banner>\n      <Instructions key=\"2\"></Instructions>\n      <br key=\"3\"></br>\n      <RecordToggle key=\"4\"></RecordToggle>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\n\nclass AudioAnalyser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { audioData: new Uint8Array(0) };\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  tick() {\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.setState({ audioData: this.dataArray });\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n    return <AudioVisualiser audioData={this.state.audioData} />;\n  }\n}\n\nexport default AudioAnalyser;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}