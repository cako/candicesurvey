{"version":3,"sources":["Banner.js","Instructions.js","AudioVisualiser.js","AudioAnalyser.js","RecordToggle.js","App.js","serviceWorker.js","index.js"],"names":["Banner","Jumbotron","fluid","key","Container","className","style","marginTop","marginBottom","aria-label","role","Instructions","Toast","maxWidth","ToastBody","AudioVisualiser","props","canvas","React","createRef","this","draw","audioData","current","height","width","context","getContext","x","sliceWidth","length","lineWidth","strokeStyle","clearRect","beginPath","moveTo","y","lineTo","stroke","ref","Component","shortid","require","Send","send_props","url_id","text","color","purl","resolve","uploaded","total","Alert","href","target","Button","size","minWidth","marginRight","onClick","RecordToggle","recorder","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","onstop","recorderOnStop","onstart","recorderOnStart","ondataavailable","recorderOnDataAvailable","state","isToggleOn","chunks","blob","nblobs","uploaded_blobs","handleClick","bind","handleSend","handleDelete","event","Blob","type","setState","push","data","m","stop","console","log","info","start","uid","generate","process","_this","slice","blob_url","reader","window","FileReader","readAsDataURL","onloadend","base64","result","split","requestOptions","method","headers","body","JSON","stringify","fetch","response","a","ok","sendStatus","Promise","reject","status","catch","error","record_props","controls","src","URL","createObjectURL","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4d000e37.chunk.js","sourcesContent":["import React from \"react\";\nimport { Jumbotron, Container } from \"reactstrap\";\n\nfunction Banner() {\n  return (\n    <Jumbotron fluid key=\"1\">\n      <Container\n        fluid\n        className=\"text-center\"\n        style={{ marginTop: -20, marginBottom: -20 }}\n      >\n        <h1>\n          <span aria-label=\"hi\" role=\"img\">\n            ðŸ‘‹\n          </span>\n        </h1>\n        <h1>Hello, Participant</h1>\n        <br></br>\n        <h4>and thank you for doing this survey!</h4>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport { Toast, ToastBody, Container } from \"reactstrap\";\n\nfunction Instructions() {\n  return (\n    <Container\n      key=\"2\"\n      fluid\n      className=\"d-flex justify-content-center align-items-center\"\n    >\n      <Toast style={{ maxWidth: \"600px\" }}>\n        <ToastBody style={{ maxWidth: \"600px\" }}>\n          <h5>Here, you can record your audio.</h5>\n          <br></br>\n          <p>\n            After the audio is recorded, a <b>unique link</b> will be generated.\n            <br></br>\n            Please send me this link!\n          </p>\n        </ToastBody>\n      </Toast>\n    </Container>\n  );\n}\n\nexport default Instructions;\n","import React, { Component } from \"react\";\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { audioData } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext(\"2d\");\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeStyle = \"#000000\";\n    context.clearRect(0, 0, width, height);\n\n    context.beginPath();\n    context.moveTo(0, height / 2);\n    for (const item of audioData) {\n      const y = (item / 255.0) * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  render() {\n    return <canvas width=\"1000\" height=\"100\" ref={this.canvas} />;\n  }\n}\n\nexport default AudioVisualiser;\n","import React, { Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\n\nclass AudioAnalyser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { audioData: new Uint8Array(0) };\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  tick() {\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.setState({ audioData: this.dataArray });\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n    return <AudioVisualiser audioData={this.state.audioData} />;\n  }\n}\n\nexport default AudioAnalyser;\n","import React from \"react\";\nimport { Alert, Button } from \"reactstrap\";\nimport AudioAnalyser from \"./AudioAnalyser\";\nimport { resolve } from \"url\";\n\nconst shortid = require(\"shortid\");\n\nconst BASE_URL = \"https://candicesurvey2020.herokuapp.com\";\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction Send(props) {\n  let send_props = props.url_id\n    ? { text: props.url_id, color: \"success\" }\n    : { text: \"Send\", color: \"warning\" };\n  let purl = resolve(BASE_URL, send_props.text);\n  if (props.uploaded == props.total) {\n    return (\n      <Alert key=\"send-success\" color=\"success\">\n        Find your recording at\n        <br></br>\n        <a href={purl} target=\"_blank\">\n          {purl}\n        </a>\n      </Alert>\n    );\n  } else if (props.total > 0) {\n    return (\n      <Alert key=\"send-uploading\" color=\"warning\">\n        Your recording at will soon be available at\n        <br></br>\n        <a href={purl} target=\"_blank\">\n          {purl}\n        </a>\n      </Alert>\n    );\n  } else if (props.total == -1) {\n    return (\n      <Alert key=\"send-fail\" color=\"danger\">\n        The upload has failed! ðŸ˜¢\n      </Alert>\n    );\n  } else {\n    return (\n      <Button\n        key=\"send-button\"\n        color={send_props.color}\n        size=\"lg\"\n        style={{ minWidth: 20, marginRight: 10 }}\n        onClick={props.onClick}\n      >\n        {send_props.text}\n      </Button>\n    );\n  }\n}\n\nclass RecordToggle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let recorder = navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        let mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.onstop = this.recorderOnStop;\n        mediaRecorder.onstart = this.recorderOnStart;\n        mediaRecorder.ondataavailable = this.recorderOnDataAvailable;\n        return mediaRecorder;\n      });\n\n    this.state = {\n      isToggleOn: false,\n      url_id: \"\",\n      chunks: [],\n      blob: null,\n      nblobs: -2,\n      uploaded_blobs: [],\n      mediaRecorder: recorder,\n    };\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.recorderOnStop = this.recorderOnStop.bind(this);\n    this.recorderOnStart = this.recorderOnStart.bind(this);\n    this.recorderOnDataAvailable = this.recorderOnDataAvailable.bind(this);\n  }\n\n  recorderOnStop(event) {\n    // let clipName = prompt(\n    //   \"Please enter your participant ID (or leave blank if you don't remember)\"\n    // );\n    // console.log(clipName);\n    let blob = new Blob(this.state.chunks, {\n      type: \"audio/ogg; codecs=opus\",\n    });\n    this.setState({ blob });\n  }\n  recorderOnDataAvailable(event) {\n    let chunks = [];\n    chunks.push(...this.state.chunks);\n    chunks.push(event.data);\n    this.setState({ chunks });\n  }\n  recorderOnStart(event) {\n    this.setState(function (state) {\n      return { chunks: [], blob: null };\n    });\n  }\n\n  handleClick() {\n    if (!this.state.isToggleOn) {\n      this.state.mediaRecorder.then((m) => {\n        if (m.state !== \"recording\") {\n          m.start();\n          console.log(\"mediaRecorder status: \" + m.state);\n        } else {\n          console.info(\"mediaRecorder is already recording\");\n        }\n      });\n    } else {\n      this.state.mediaRecorder.then((m) => {\n        if (m.state !== \"inactive\") {\n          m.stop();\n          console.log(\"mediaRecorder status: \" + m.state);\n        } else {\n          console.info(\"mediaRecorder is already inactive\");\n        }\n      });\n    }\n\n    this.setState({\n      isToggleOn: !this.state.isToggleOn,\n      mediaRecorder: this.state.mediaRecorder,\n    });\n  }\n  handleSend() {\n    const uid = shortid.generate();\n    const purl = process.env.PUBLIC_URL + \"/recording/\" + uid;\n    console.log(\"Uploading to \" + purl);\n\n    let blob = new Blob(this.state.chunks, {\n      type: \"audio/ogg; codecs=opus\",\n    });\n\n    let nblobs = 0;\n    const blobSize = 4000000; // 4mb\n    for (let start = 0; start < blob.size; start += blobSize) {\n      nblobs = nblobs + 1;\n    }\n    this.setState({ nblobs });\n\n    let _this = this;\n    for (let start = 0; start < blob.size; start += blobSize) {\n      const blob = blob.slice(start, start + blobSize + 1);\n      const blob_url = purl + \"_\" + blob;\n      let reader = new window.FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = function () {\n        let base64 = reader.result;\n        base64 = base64.split(\",\")[1];\n        // console.log(base64);\n\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ uid: uid, audio: base64 }),\n        };\n        fetch(blob_url, requestOptions)\n          .then(async (response) => {\n            console.log(\n              \"Uploading blob \" + start + \" of \" + _this.state.nblobs\n            );\n            let uploaded_blobs = [];\n            uploaded_blobs.push(_this.state.uploaded_blobs);\n            if (!response.ok) {\n              _this.setState({ sendStatus: \"failed\" });\n              return Promise.reject(response.status);\n            }\n            // sleep(3000);\n            uploaded_blobs.push(start);\n            _this.setState({ uploaded_blobs });\n            // const data = await response.json();\n            // if (data && data.message) {\n            //   this.setState({ postId: data.id });\n            // }\n          })\n          .catch((error) => {\n            _this.setState({ nblobs: -1 });\n            console.error(\"There was an error uploading the file!\\n\", error);\n          });\n      };\n    }\n\n    console.log(this.state.sendStatus);\n  }\n  handleDelete() {\n    this.setState({ isToggleOn: false, blob: null, url_id: \"\" });\n  }\n\n  render() {\n    let record_props = this.state.isToggleOn\n      ? { text: \"Stop recording\", color: \"danger\" }\n      : { text: \"Record\", color: \"primary\" };\n    let send_props = this.state.url_id\n      ? { text: this.state.url_id, color: \"success\" }\n      : { text: \"Send\", color: \"warning\" };\n    if (!this.state.blob) {\n      return (\n        <div className=\"text-center\">\n          <Button\n            color={record_props.color}\n            size=\"lg\"\n            style={{ minWidth: 200 }}\n            onClick={this.handleClick}\n          >\n            {record_props.text}\n          </Button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"text-center\">\n          <Button\n            color={record_props.color}\n            size=\"lg\"\n            style={{ minWidth: 200 }}\n            onClick={this.handleClick}\n          >\n            {record_props.text}\n          </Button>\n          <br></br>\n          <br></br>\n          <div className=\"text-center\">\n            <audio\n              style={{ minWidth: 320 }}\n              controls={true}\n              src={URL.createObjectURL(this.state.blob)}\n            ></audio>\n          </div>\n          <Send\n            uploaded={this.state.uploaded_blobs.length()}\n            total={this.state.nblobs}\n            url_id={this.state.url_id}\n            onClick={this.handleSend}\n          ></Send>\n        </div>\n      );\n    }\n  }\n}\n\nexport default RecordToggle;\n\n//<Button color=\"danger\" size=\"lg\" style={{ minWidth: 20, marginLeft: 0 }} onClick={this.handleDelete}Delete</Button>\n","import React from \"react\";\nimport \"./App.css\";\nimport Banner from \"./Banner\";\nimport Instructions from \"./Instructions\";\nimport RecordToggle from \"./RecordToggle\";\n\nfunction App() {\n  return (\n    <div>\n      <Banner key=\"1\"></Banner>\n      <Instructions key=\"2\"></Instructions>\n      <br key=\"3\"></br>\n      <RecordToggle key=\"4\"></RecordToggle>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}