{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Banner","Jumbotron","fluid","key","Container","className","aria-label","role","Instructions","Toast","style","maxWidth","ToastBody","RecordButton","MyButton","state","pressed","this","setState","btn_text","btn_class","onClick","changeColor","bind","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,sLCqB3C,SAASC,IACP,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,IAAI,KACnB,kBAACC,EAAA,EAAD,CAAWF,OAAK,EAACG,UAAU,eACzB,4BACE,0BAAMC,aAAW,KAAKC,KAAK,OAA3B,iBAIF,kDACA,6BACA,sEAMR,SAASC,IACP,OACE,kBAACJ,EAAA,EAAD,CACED,IAAI,IACJD,OAAK,EACLG,UAAU,oDAEV,kBAACI,EAAA,EAAD,CAAOC,MAAO,CAAEC,SAAU,UACxB,kBAACC,EAAA,EAAD,CAAWF,MAAO,CAAEC,SAAU,UAC5B,gEACA,8EACkD,0CAAmB,IADrE,uBAIA,4DAOV,SAASE,IACP,OACE,kBAACT,EAAA,EAAD,CACED,IAAI,IACJD,OAAK,EACLG,UAAU,oDAEV,kBAAC,EAAD,O,IAKAS,E,kDACJ,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,SAAS,GAJC,E,0DASZC,KAAKC,SAAS,CAAEF,SAAUC,KAAKF,MAAMC,Y,+BAIrC,IAAIG,EACAC,EAAY,aAQhB,OAPKH,KAAKF,MAAMC,SAIdI,GAAwB,cACxBD,EAAW,kBAJXC,GAAwB,eACxBD,EAAW,UAMX,4BAAQd,UAAWe,EAAWC,QAASJ,KAAKK,YAAYC,KAAKN,OAC1DE,O,GAzBcK,IAAMC,WA6DdC,MA9Bf,WACE,MAAO,CACL,kBAAC1B,EAAD,MACA,kBAACQ,EAAD,MACA,wBAAIL,IAAI,MACR,kBAACU,EAAD,QC/FgBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbb450dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  Jumbotron,\n  Toast,\n  ToastHeader,\n  ToastBody,\n  Alert,\n  Container,\n  Col,\n  Row,\n} from \"reactstrap\";\n\nfunction activateLasers(event) {\n  event.target.innerHTML = \"Recording... Click to stop!\";\n  event.target.className += \" btn-danger\";\n  console.log(event.target.className);\n  console.log(\"Button clicked\");\n}\n\nfunction Banner() {\n  return (\n    <Jumbotron fluid key=\"1\">\n      <Container fluid className=\"text-center\">\n        <h1>\n          <span aria-label=\"hi\" role=\"img\">\n            ðŸ‘‹\n          </span>\n        </h1>\n        <h1>Hello, Participant</h1>\n        <br></br>\n        <h4>and thank you for doing this survey!</h4>\n      </Container>\n    </Jumbotron>\n  );\n}\n\nfunction Instructions() {\n  return (\n    <Container\n      key=\"2\"\n      fluid\n      className=\"d-flex justify-content-center align-items-center\"\n    >\n      <Toast style={{ maxWidth: \"600px\" }}>\n        <ToastBody style={{ maxWidth: \"600px\" }}>\n          <h5>Here, you can record your audio.</h5>\n          <p>\n            After the audio is recorded, we will generate a <b>unique link</b>{\" \"}\n            for this recording.\n          </p>\n          <p>Send me this link, please!</p>\n        </ToastBody>\n      </Toast>\n    </Container>\n  );\n}\n\nfunction RecordButton() {\n  return (\n    <Container\n      key=\"4\"\n      fluid\n      className=\"d-flex justify-content-center align-items-center\"\n    >\n      <MyButton></MyButton>\n    </Container>\n  );\n}\n\nclass MyButton extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      pressed: false,\n    };\n  }\n\n  changeColor() {\n    this.setState({ pressed: !this.state.pressed });\n  }\n\n  render() {\n    let btn_text;\n    let btn_class = \"btn btn-lg\";\n    if (!this.state.pressed) {\n      btn_class = btn_class + \" btn-primary\";\n      btn_text = \"Record\";\n    } else {\n      btn_class = btn_class + \" btn-danger\";\n      btn_text = \"Stop recoding\";\n    }\n    return (\n      <button className={btn_class} onClick={this.changeColor.bind(this)}>\n        {btn_text}\n      </button>\n    );\n  }\n}\n\nfunction App() {\n  return [\n    <Banner></Banner>,\n    <Instructions></Instructions>,\n    <br key=\"3\"></br>,\n    <RecordButton></RecordButton>,\n  ];\n}\n\n// function DefaultApp() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}